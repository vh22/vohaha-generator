// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// $TYPOGRAPHY
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

@function calculateEm($size) {
  $remSize: $size / $main-font-size;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateEm($size);
}




// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// $PX_TO_REM ( @include rem-fallback(margin, 10, 20, 30, 40); )
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}




// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// $TRIANGLE ( @include triangle(bottom, $color, $size); )
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

/// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
/// @param {Color} $color [currentcolor] - Triangle color
/// @param {Length} $size [1em] - Triangle size

@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @error "Direction must be either `top`, `right`, `bottom` or `left`.";
  }

  width: 0;
  height: 0;
  content: '';
  z-index: $z-base;
  border-#{opposite-position($direction)}: ($size * 1.5) solid $color;

  $perpendicular-borders: $size solid transparent;

  @if $direction == top or $direction == bottom {
    border-left: $perpendicular-borders;
    border-right: $perpendicular-borders;
  } @else if $direction == right or $direction == left {
    border-bottom: $perpendicular-borders;
    border-top: $perpendicular-borders;
  }
}




// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// $MODERNIZR_HELPER ( @include nope($features...) { ... } )
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

/// Prints classes for supported or unsupported features
/// @access private
/// @param {Bool}      $supports   - Whether to check for supported features or not
/// @param {ArgList}   $features   - List of features

@mixin _modernizr($supports, $features...) {

  // Use the 'no-' prefix if checking for unsuported features (e.g. `.no-translate3d`)
  $prefix: if($supports, '', 'no-');

  // Features selector
  // a) create a string if checking for supported features. We'll concatenate class names later on (e.g. `.translate3d.opacity selector`)
  // b) create a list if checking for unsuported features. We'll append the class names later on (e.g. `.no-js selector, .no-translate3d selector`)
  $selector: if($supports, '', unquote('.no-js'));

  // Make sure the mixin has been called within a selector
  @if not & {
    @error 'Modernizr mixin should be called within a selector.';
  }

  // Generate placeholder and selectors
  @each $feature in $features {

    // Making sure $feature is a string
    @if type-of($feature) != 'string' {

      @error '`#{$feature}` is not a string for `modernizr`.';

    } @else {

      // Define the new selector string (e.g. `.translate3d` or `.no-translate3d`)
      $new-selector: #{'.' + $prefix + $feature};

      // Append the new selector
      // a) to the string if yep (e.g. `.translate3d.opacity`)
      // b) to the list if nope (e.g. `.no-translate3d, .no-opacity`)
      $selector: if($supports, $selector + $new-selector, append($selector, $new-selector, 'comma'));

    }
  }

  // Generate selector and print content
  // @todo remove workaround once Libsass supports selector functions.

  // RubySass 3.4+
  @if function-exists('selector-nest') {

    // Generate selector by nesting features classes and the parent selector
    $selector: selector-nest($selector, &);

    @at-root #{$selector} {
      @content;
    }

  } @else {

    // Libsass 3.2 workaround using Modernizr Mixin v1.0' placeholder technique
    // with a randomly generated placeholder name.
    $placeholder: '%' + rand + random(100000000);

    // Use placeholder technique generating a new placeholder each time.
    #{$placeholder} & {
      @content;
    }

    @at-root #{$selector} {
      @extend #{$placeholder};
    }
  }

}

// -----------------------------------------------------------------------------
// Yep mixin
// -----------------------------------------------------------------------------
/// Prints classes for supported features
/// @access public
/// @param {ArgList} $features - List of features
/// @example scss
/// .my-selector {
///   @include yep(opacity, csstransforms) {
///     // ...
///   }
/// }

@mixin yep($features...) {
  @include _modernizr(true, $features...) {
    @content;
  }
}

// -----------------------------------------------------------------------------
// Nope mixin
// -----------------------------------------------------------------------------
/// Prints classes for unsupported features and lack of JS
/// @access public
/// @param {ArgList} $features - List of features
/// @example scss
/// .my-selector {
///   @include nope(opacity, csstransforms) {
///     // ...
///   }
/// }

@mixin nope($features...) {
  @include _modernizr(false, $features...) {
    @content;
  }
}

// -----------------------------------------------------------------------------
// Libsass error check
// -----------------------------------------------------------------------------
/// There is a known bug in Libsass 3.2.3 / 3.2.4 that makes Modernizr mixin
/// output incorrect selectors. This test throws an error for versions of Libsass
/// that contain said bug.
/// @todo Remove once the Libsass bug is patched

%_modernizr-libsass-bug-test {
  $a: '%foo#{&}';

  @at-root #{$a} {
    $b: #{&};
    @if $b == '%_modernizr-libsass-bug-test %foo%_modernizr-libsass-bug-test' {
      @error '[Modernizr mixin]: There is a known bug in Libsass 3.2.3 / 3.2.4 that makes Modernizr mixin output incorrect selectors. If you want to keep using the Modernizr Mixin you need to stick to Libsass 3.2.2 until the bug is patched, hopefully in 3.2.5. Learn more at https://github.com/danielguillan/modernizr-mixin/issues/24';
    }
  }
}




// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// $MEDIA_QUERIES
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// -----------------------------------------------------------------------------

//  Author: Rafal Bromirski
//  www: http://rafalbromirski.com/
//  github: http://github.com/paranoida/sass-mediaqueries
//
//  Licensed under a MIT License
//
//  Version:
//  1.5.1

// --- screen ------------------------------------------------------------------

@mixin screen($res-min, $res-max, $orientation: false) {
  @if $orientation {
    @media screen and (min-width: $res-min) and (max-width: $res-max) and (orientation: #{$orientation}) {
      @content;
    }
  } @else {
    @media screen and (min-width: $res-min) and (max-width: $res-max) {
      @content;
    }
  }
}

@mixin max-screen($res) {
  @media screen and (max-width: $res) {
    @content;
  }
}

@mixin min-screen($res) {
  @media screen and (min-width: $res) {
    @content;
  }
}

@mixin screen-height($res-min, $res-max, $orientation: false) {
  @if $orientation {
    @media screen and (min-height: $res-min) and (max-height: $res-max) and (orientation: #{$orientation}) {
      @content;
    }
  } @else {
    @media screen and (min-height: $res-min) and (max-height: $res-max) {
      @content;
    }
  }
}

@mixin max-screen-height($res) {
  @media screen and (max-height: $res) {
    @content;
  }
}

@mixin min-screen-height($res) {
  @media screen and (min-height: $res) {
    @content;
  }
}

// --- hdpi --------------------------------------------------------------------

// Based on bourbon hidpi-media-queries file
// (https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/css3/_hidpi-media-query.scss)
// HiDPI mixin. Default value set to 1.3 to target Google Nexus 7
// (http://bjango.com/articles/min-device-pixel-ratio/)

@mixin hdpi($ratio: 1.3) {
  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),
  only screen and (min--moz-device-pixel-ratio: $ratio),
  only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),
  only screen and (min-resolution: #{round($ratio*96)}dpi),
  only screen and (min-resolution: #{$ratio}dppx) {
    @content;
  }
}

// --- hdtv --------------------------------------------------------------------

@mixin hdtv($standard: '1080') {
  $device-min-width: false;
  $device-min-height: false;

  $standards: ('720p', 1280px, 720px) ('1080', 1920px, 1080px) ('2K', 2048px, 1080px) ('4K', 4096px, 2160px);

  @each $s in $standards {
    @if $standard == nth($s, 1) {
      $device-min-width: nth($s, 2);
      $device-min-height: nth($s, 3);
    }
  }

  @media only screen and (min-device-width: $device-min-width) and (min-device-height: $device-min-height) and (min-width: $device-min-width) and (min-height: $device-min-height) {
    @content;
  }
}

// --- iphone-3 ----------------------------------------------------------------

@mixin iphone3($orientation: all) {
  $device-min-width: 320px;
  $device-max-width: 480px;
  $device-pixel-ratio: 1;

  @if $orientation == all {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (-webkit-device-pixel-ratio: $device-pixel-ratio) {
      @content;
    }
  } @else {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (-webkit-device-pixel-ratio: $device-pixel-ratio) and (orientation: #{$orientation}) {
      @content;
    }
  }
}

// --- iphone4 -----------------------------------------------------------------

@mixin iphone4($orientation: all) {
  $device-min-width: 320px;
  $device-max-width: 480px;
  $device-pixel-ratio: 2;
  $device-aspect-ratio: '2/3';

  @if $orientation == all {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (-webkit-device-pixel-ratio: $device-pixel-ratio) and (device-aspect-ratio: $device-aspect-ratio) {
      @content;
    }
  } @else {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (-webkit-device-pixel-ratio: $device-pixel-ratio) and (device-aspect-ratio: 2/3) and (orientation: #{$orientation}) {
      @content;
    }
  }
}

// --- iphone5 -----------------------------------------------------------------

@mixin iphone5($orientation: all) {
  $device-min-width: 320px;
  $device-max-width: 568px;
  $device-pixel-ratio: 2;
  $device-aspect-ratio: '40/71';

  @if $orientation == all {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (-webkit-device-pixel-ratio: $device-pixel-ratio) and (device-aspect-ratio: $device-aspect-ratio) {
      @content;
    }
  } @else {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (-webkit-device-pixel-ratio: $device-pixel-ratio) and (device-aspect-ratio: $device-aspect-ratio) and (orientation: #{$orientation}) {
      @content;
    }
  }
}

// --- iphone6 -----------------------------------------------------------------

@mixin iphone6($orientation: all) {
  $deviceMinWidth: 375px;
  $deviceMaxWidth: 667px;
  $devicePixelRatio: 2;

  @if $orientation == all {
    @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) {
      @content;
    }
  } @else {
    @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (orientation: #{$orientation}) {
      @content;
    }
  }
}

// --- iphone6 plus ------------------------------------------------------------

@mixin iphone6-plus($orientation: all) {
  $deviceMinWidth: 414px;
  $deviceMaxWidth: 736px;
  $devicePixelRatio: 3;

  @if $orientation == all {
    @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) {
      @content;
    }
  } @else {
    @media only screen and (min-device-width: $deviceMinWidth) and (max-device-width: $deviceMaxWidth) and (-webkit-device-pixel-ratio: $devicePixelRatio) and (orientation: #{$orientation}) {
      @content;
    }
  }
}

// --- ipad (all) --------------------------------------------------------------

@mixin ipad($orientation: all) {
  $device-min-width: 768px;
  $device-max-width: 1024px;

  @if $orientation == all {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) {
      @content;
    }
  } @else {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (orientation: #{$orientation}) {
      @content;
    }
  }
}

// --- ipad-retina -------------------------------------------------------------

@mixin ipad-retina($orientation: all) {
  $device-min-width: 768px;
  $device-max-width: 1024px;
  $device-pixel-ratio: 2;

  @if $orientation == all {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (-webkit-device-pixel-ratio: $device-pixel-ratio) {
      @content;
    }
  } @else {
    @media only screen and (min-device-width: $device-min-width) and (max-device-width: $device-max-width) and (-webkit-device-pixel-ratio: $device-pixel-ratio) and (orientation: #{$orientation}) {
      @content;
    }
  }
}

// --- orientation -------------------------------------------------------------

@mixin _orientation($orientation) {
  @media screen and (orientation: $orientation) {
    @content;
  }
}

@mixin landscape() {
  @include _orientation(landscape) {
    @content;
  }
}

@mixin portrait() {
  @include _orientation(portrait) {
    @content;
  }
}